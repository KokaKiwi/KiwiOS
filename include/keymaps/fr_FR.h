#ifndef KEYMAP_FR_FR_H_
#define KEYMAP_FR_FR_H_

char keymap[] = {
    //  NORMAL, SHIFT, ALT, SHIFT+ALT
    0x1b, 0x1b, 0x1b, 0x1b,     // 0x01 = ESC
    '&' , '1',  0xff, 0xff,     // 0x02 = 1
    'e' , '2',  '~' , 0xff,     // 0x03 = 2
    '"' , '3',  '#' , 0xff,     // 0x04 = 3
    '\'', '4',  '{' , 0xff,     // 0x05 = 4
    '(' , '5',  '[' , 0xff,     // 0x06 = 5
    '-' , '6',  '|' , 0xff,     // 0x07 = 6
    'e' , '7',  '`' , 0xff,     // 0x08 = 7
    '_' , '8',  '\\', 0xff,     // 0x09 = 8
    'c' , '9',  '^' , 0xff,     // 0x0a = 9
    'a' , '0',  '@' , 0xff,     // 0x0b = 0
    ')' , '?',  ']' , 0xff,     // 0x0c = -
    '=' , '+',  '}' , 0xff,     // 0x0d = =
    '\b', '\b', '\b', '\b',     // 0x0e = BS
    '\t', '\t', '\t', '\t',     // 0x0f = TAB
    'a' , 'A' , 0xff, 0xff,     // 0x10 = Q
    'z' , 'Z' , 0xff, 0xff,     // 0x11 = W
    'e' , 'E' , 0xff, 0xff,     // 0x12 = E
    'r' , 'R' , 0xff, 0xff,     // 0x13 = R
    't' , 'T' , 0xff, 0xff,     // 0x14 = T
    'y' , 'Y' , 0xff, 0xff,     // 0x15 = Y
    'u' , 'U' , 0xff, 0xff,     // 0x16 = U
    'i' , 'I' , 0xff, 0xff,     // 0x17 = I
    'o' , 'O' , 0xff, 0xff,     // 0x18 = O
    'p' , 'P' , 0xff, 0xff,     // 0x19 = P
    '^' , '?' , 0xff, 0xff,     // 0x1a = [
    '$' , '?' , '?' , 0xff,     // 0x1b = ]
    '\n', '\n', '\n', '\n',     // 0x1c = ENTER
    0xff, 0xff, 0xff, 0xff,     // 0x1d = LCTRL
    'q' , 'Q' , 0xff, 0xff,     // 0x1e = A
    's' , 'S' , 0xff, 0xff,     // 0x1f = S
    'd' , 'D' , 0xff, 0xff,     // 0x20 = D
    'f' , 'F' , 0xff, 0xff,     // 0x21 = F
    'g' , 'G' , 0xff, 0xff,     // 0x22 = G
    'h' , 'H' , 0xff, 0xff,     // 0x23 = H
    'j' , 'J' , 0xff, 0xff,     // 0x24 = J
    'k' , 'K' , 0xff, 0xff,     // 0x25 = K
    'l' , 'L' , 0xff, 0xff,     // 0x26 = L
    'm' , 'M' , 0xff, 0xff,     // 0x27 = ;
    'u' , '%' , 0xff, 0xff,     // 0x28 = '
    '*' , 'u' , 0xff, 0xff,     // 0x29 = `
    0xff, 0xff, 0xff, 0xff,     // 0x2a = LSHIFT
    '*' , '?' , 0xff, 0xff,     // 0x2b = '\'
    'w' , 'W' , 0xff, 0xff,     // 0x2c = Z
    'x' , 'X' , 0xff, 0xff,     // 0x2d = X
    'c' , 'C' , 0xff, 0xff,     // 0x2e = C
    'v' , 'V' , 0xff, 0xff,     // 0x2f = V
    'b' , 'B' , 0xff, 0xff,     // 0x30 = B
    'n' , 'N' , 0xff, 0xff,     // 0x31 = N
    ',' , '?' , 0xff, 0xff,     // 0x32 = M
    ';' , '.' , 0xff, 0xff,     // 0x33 = ,
    ':' , '/' , 0xff, 0xff,     // 0x34 = .
    '!' , '?' , 0xff, 0xff,     // 0x35 = /
    0xff, 0xff, 0xff, 0xff,     // 0x36 = RSHIFT
    '*' , '*' , '*' , '*' ,     // 0x37 = KPD: *
    0xff, 0xff, 0xff, 0xff,     // 0x38 = LALT
    ' ' , ' ' , ' ' , ' ' ,     // 0x39 = SPACE
    0xff, 0xff, 0xff, 0xff,     // 0x3a = CAPSLOCK
    0xff, 0xff, 0xff, 0xff,     // 0x3b = F1
    0xff, 0xff, 0xff, 0xff,     // 0x3c = F2
    0xff, 0xff, 0xff, 0xff,     // 0x3d = F3
    0xff, 0xff, 0xff, 0xff,     // 0x3e = F4
    0xff, 0xff, 0xff, 0xff,     // 0x3f = F5
    0xff, 0xff, 0xff, 0xff,     // 0x40 = F6
    0xff, 0xff, 0xff, 0xff,     // 0x41 = F7
    0xff, 0xff, 0xff, 0xff,     // 0x42 = F8
    0xff, 0xff, 0xff, 0xff,     // 0x43 = F9
    0xff, 0xff, 0xff, 0xff,     // 0x44 = F10
    0xff, 0xff, 0xff, 0xff,     // 0x45 = NUMBERLOCK
    0xff, 0xff, 0xff, 0xff,     // 0x46 = SCROLLLOCK
    '7' , '7' , 0xff, 0xff,     // 0x47 = KPD: 7
    '8' , '8' , 0xff, 0xff,     // 0x48 = KPD: 8
    '9',  '9' , 0xff, 0xff,     // 0x49 = KPD: 9
    '-',  '-' , 0xff, 0xff,     // 0x4a = KPD: -
    '4',  '4' , 0xff, 0xff,     // 0x4b = KPD: 4
    '5',  '5' , 0xff, 0xff,     // 0x4c = KPD: 5
    '6',  '6' , 0xff, 0xff,     // 0x4d = KPD: 6
    '+',  '+' , 0xff, 0xff,     // 0x4e = KPD: +
    '1',  '1' , 0xff, 0xff,     // 0x4f = KPD: 1
    '2',  '2' , 0xff, 0xff,     // 0x50 = KPD: 2
    '3',  '3' , 0xff, 0xff,     // 0x51 = KPD: 3
    '0',  '0' , 0xff, 0xff,     // 0x52 = KPD: 0
    '.',  '.' , 0xff, 0xff,     // 0x53 = KPD: .
    0xff, 0xff, 0xff, 0xff,     // 0x54 = UNKNOWN
    0xff, 0xff, 0xff, 0xff,     // 0x55 = UNKNOWN
    '<' , '>' , 0xff, 0xff,     // 0x56 = <
    0xff, 0xff, 0xff, 0xff,     // 0x57 = F11
    0xff, 0xff, 0xff, 0xff,     // 0x58 = F12
};

#endif
